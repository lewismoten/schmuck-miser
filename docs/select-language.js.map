{"version":3,"file":"select-language.js","mappings":"+zBAOA,IAAMA,EAAU,CACd,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OAkEF,QA/DuB,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvBC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,EAAaF,EAAE,wCACfG,EAAuC,QAAtBC,SAASC,KAAKC,IAc/BC,EAAiBT,EA2BvB,OACE,OAAC,IAAD,CACEA,MAAOS,EACPR,SA1CiB,SAACS,EAAGC,EAAQC,GAChB,iBAAXA,GAA2BX,EAASU,IA0CtCE,GAAI,CAAEC,MAAO,KACbf,QAASA,EACTgB,eAAa,EACbC,eAhCmB,SAACL,GACtB,MAAe,KAAXA,EAAsB,GACnBT,EAAE,6BAAD,OAA8BS,EAA9B,YA+BNM,aA5BiB,SAACC,EAAOP,GAC3B,IAKIQ,EALEC,EAAQlB,EAAE,6BAAD,OAA8BS,EAA9B,WACXU,EAASnB,EAAE,6BAAD,OAA8BS,EAA9B,YAWd,OAVIS,IAAUC,GAAUA,IAAWnB,EAAE,wBACnCmB,EAAS,IAGNhB,GAA6B,OAAXM,EAEZN,GAA6B,OAAXM,IAC3BQ,EAAY,QAFZA,EAAY,QAMZ,gBAAC,KAAD,QAAKN,GAAI,CAAES,QAAS,SAAcJ,IAChC,OAAC,IAAD,CAAKL,GAAI,CAAEC,MAAO,aAAlB,EAA4BM,IAC5B,OAAC,IAAD,CAAKP,GAAI,CAAEC,MAAO,MAAOK,UAAAA,SAAzB,EAAuCE,KAazCE,YA5CgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAeN,GAAlB,mBAClB,gBAAC,KAAD,UACMA,EADN,CAEEE,MAAOhB,EACPoB,WAAU,OAAOA,GAAP,IAAmBC,aAAc","sources":["webpack://schmuck-miser/./src/components/SelectLanguage/SelectLanguage.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { useTranslation } from 'react-i18next';\n\nconst options = [\n  'en-US',\n  'en',\n  'ru',\n  'es',\n  'tr',\n  'fa',\n  'fr',\n  'de',\n  'ja',\n  'vi',\n  'zh',\n  'tlh',\n];\n\nconst SelectLanguage = ({ value, onChange }) => {\n  const { t } = useTranslation();\n  const inputLabel = t('components.selectLanguage.inputLabel');\n  const isRightAligned = document.body.dir === 'rtl';\n\n  const handleChange = (e, option, action) => {\n    if (action === 'selectOption') onChange(option);\n  };\n\n  const renderInput = ({ inputProps, ...props }) => (\n    <TextField\n      {...props}\n      label={inputLabel}\n      inputProps={{ ...inputProps, autoComplete: 'new-password' }}\n    />\n  );\n\n  const selectedOption = value;\n\n  const getOptionLabel = (option) => {\n    if (option === '') return '';\n    return t(`components.selectLanguage.${option}.label`);\n  };\n\n  const renderOption = (props, option) => {\n    const label = t(`components.selectLanguage.${option}.label`);\n    let native = t(`components.selectLanguage.${option}.native`);\n    if (label === native || native === t('__META.name.native')) {\n      native = '';\n    }\n    let textAlign;\n    if (!isRightAligned && option === 'fa') {\n      textAlign = 'right';\n    } else if (isRightAligned && option !== 'fa') {\n      textAlign = 'left';\n    }\n\n    return (\n      <Box sx={{ display: 'flex' }} {...props}>\n        <Box sx={{ width: '50%' }}>{label}</Box>\n        <Box sx={{ width: '50%', textAlign }}>{native}</Box>\n      </Box>\n    );\n  };\n  return (\n    <Autocomplete\n      value={selectedOption}\n      onChange={handleChange}\n      sx={{ width: 300 }}\n      options={options}\n      autoHighlight\n      getOptionLabel={getOptionLabel}\n      renderOption={renderOption}\n      renderInput={renderInput}\n    />\n  );\n};\n\nSelectLanguage.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default SelectLanguage;\n"],"names":["options","value","onChange","t","useTranslation","inputLabel","isRightAligned","document","body","dir","selectedOption","e","option","action","sx","width","autoHighlight","getOptionLabel","renderOption","props","textAlign","label","native","display","renderInput","inputProps","autoComplete"],"sourceRoot":""}