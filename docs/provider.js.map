{"version":3,"file":"provider.js","mappings":"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","sources":["webpack://schmuck-miser/./src/state/accounts/index.js","webpack://schmuck-miser/./src/state/actions.js","webpack://schmuck-miser/./src/state/io/index.js","webpack://schmuck-miser/./src/state/index.js","webpack://schmuck-miser/./src/state/accounts/selectors.js","webpack://schmuck-miser/./src/state/accounts/saga.js","webpack://schmuck-miser/./src/state/io/saveAsBlob.js","webpack://schmuck-miser/./src/state/io/readAsText.js","webpack://schmuck-miser/./src/state/io/saga.js","webpack://schmuck-miser/./src/state/saga.js","webpack://schmuck-miser/./src/state/configureStore.js","webpack://schmuck-miser/./src/components/RootProvider/RootProvider.js","webpack://schmuck-miser/./src/state/accounts/actions.js","webpack://schmuck-miser/./src/state/actionBuilder.js","webpack://schmuck-miser/./src/state/io/actions.js","webpack://schmuck-miser/./src/state/io/selectors.js"],"sourcesContent":["import { handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport * as actions from './actions';\n\nconst initialState = {\n  allIds: [],\n  byId: {},\n  isLoading: false,\n  hasLoaded: false,\n  hasError: false,\n};\n\nconst onLoadRequest = produce((draft) => {\n  draft.isLoading = true;\n});\n\nconst onLoadSuccess = produce((draft, action) => {\n  draft.hasError = false;\n  draft.allIds = action.payload.allIds;\n  draft.byId = action.payload.byId;\n  draft.hasLoaded = true;\n});\n\nconst onLoadFailure = produce((draft) => {\n  draft.hasError = true;\n});\n\nconst onLoadFulfill = produce((draft) => {\n  draft.isLoading = false;\n});\n\nexport default handleActions(\n  {\n    [actions.load.REQUEST]: onLoadRequest,\n    [actions.load.SUCCESS]: onLoadSuccess,\n    [actions.load.FAILURE]: onLoadFailure,\n    [actions.load.FULFILL]: onLoadFulfill,\n  },\n  initialState\n);\n","import emoji from '@lewismoten/emoji';\nimport actionBuilder from './actionBuilder';\nconst build = actionBuilder('io', emoji.worldMap);\n\nexport const restore = build('restore');\n","import { handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport * as actions from './actions';\nimport * as rootActions from '../actions';\n\nconst initialState = {\n  isDownloading: false,\n  hasDownloadError: false,\n  hasDownloaded: false,\n  isUploading: false,\n  hasUploadError: false,\n  hasUploaded: false,\n};\n\nconst onDownloadRequest = produce((draft) => {\n  draft.isDownloading = true;\n  draft.hasDownloadError = false;\n});\n\nconst onDownloadSuccess = produce((draft) => {\n  draft.hasDownloaded = true;\n});\n\nconst onDownloadFailure = produce((draft) => {\n  draft.hasDownloadError = true;\n});\n\nconst onDownloadFulfill = produce((draft) => {\n  draft.isDownloading = false;\n});\n\nconst onUploadRequest = produce((draft) => {\n  draft.isUploading = true;\n  draft.hasUploadError = false;\n});\n\nconst onRestore = produce(() => {\n  return initialState;\n});\nconst onUploadSuccess = produce((draft) => {\n  draft.hasUploaded = true;\n  draft.isUploading = false;\n  draft.isDownloading = false;\n});\n\nconst onUploadFailure = produce((draft) => {\n  draft.hasUploadError = true;\n});\n\nconst onUploadFulfill = produce((draft) => {\n  draft.isUploading = false;\n});\n\nexport default handleActions(\n  {\n    [actions.download.REQUEST]: onDownloadRequest,\n    [actions.download.SUCCESS]: onDownloadSuccess,\n    [actions.download.FAILURE]: onDownloadFailure,\n    [actions.download.FULFILL]: onDownloadFulfill,\n    [rootActions.restore.TRIGGER]: onRestore,\n    [actions.upload.REQUEST]: onUploadRequest,\n    [actions.upload.SUCCESS]: onUploadSuccess,\n    [actions.upload.FAILURE]: onUploadFailure,\n    [actions.upload.FULFILL]: onUploadFulfill,\n  },\n  initialState\n);\n","import { combineReducers } from 'redux';\nimport accounts from './accounts';\nimport io from './io';\nimport * as actions from './actions';\n\nconst INITIAL_STATE = {};\nconst reducers = {\n  accounts,\n  io,\n};\n\nconst sliceReducers = combineReducers(reducers);\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case actions.restore.TRIGGER:\n      state = {\n        ...state,\n        ...action.payload,\n      };\n      break;\n    default:\n      break;\n  }\n  return sliceReducers(state, action);\n};\n\nexport default rootReducer;\n","import { createSelector } from 'reselect';\n\nconst slice = ({ accounts = {} } = {}) => accounts;\nexport const allIds = createSelector(slice, ({ allIds = [] }) => allIds);\nexport const byId = createSelector(slice, ({ byId = {} }) => byId);\nexport const isLoading = createSelector(slice, ({ isLoading }) => !!isLoading);\nexport const hasError = createSelector(slice, ({ hasError }) => !!hasError);\nexport const hasLoaded = createSelector(slice, ({ hasLoaded }) => !!hasLoaded);\n","import { all, takeEvery, put, select } from 'redux-saga/effects';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\n\nfunction* onLoad() {\n  const isLoading = yield select(selectors.isLoading);\n  if (isLoading) return;\n\n  const payload = {\n    allIds: [1],\n    byId: {\n      1: {\n        id: 1,\n        name: 'first account',\n      },\n    },\n  };\n\n  yield put(actions.load.request());\n  yield put(actions.load.success(payload));\n  yield put(actions.load.fulfill());\n}\n\nexport default function* handleRequestSaga() {\n  yield all([takeEvery(actions.load.TRIGGER, onLoad)]);\n}\n","import { take, put, cancelled } from 'redux-saga/effects';\nimport { eventChannel, END } from 'redux-saga';\n\nconst REQUEST = 'request';\nconst FAILURE = 'failure';\nconst FULFILL = 'fulfill';\nconst SUCCESS = 'success';\n\nconst saveAsBlob = (data, type, name) => {\n  return eventChannel((emitter) => {\n    try {\n      emitter({ type: REQUEST });\n      import(/* webpackChunkName: 'file-saver' */ 'file-saver')\n        .then(({ default: fileSaver }) => {\n          console.log(Object.keys(fileSaver));\n          fileSaver.saveAs(new Blob([data], { type }), name);\n          emitter({ type: SUCCESS });\n        })\n        .catch((e) => {\n          emitter({ type: FAILURE, message: e.message });\n        })\n        .finally(() => {\n          emitter({ type: FULFILL });\n          emitter(END);\n        });\n    } catch (e) {\n      emitter({ type: FAILURE, message: e.message });\n      emitter(END);\n    }\n    const unsubscribe = () => {};\n    return unsubscribe;\n  });\n};\n\nfunction* watchSaveAsBlob(routine, channel) {\n  let fulfill = false;\n  let fulfilled = false;\n  while (!fulfill) {\n    try {\n      let taken = yield take(channel);\n      switch (taken.type) {\n        case FAILURE:\n          fulfill = true;\n          yield put(routine.failure(taken));\n          break;\n        case REQUEST:\n          yield put(routine.request(taken));\n          break;\n        case FULFILL:\n          fulfill = true;\n          fulfilled = true;\n          yield put(routine.fulfill(taken));\n          break;\n        case SUCCESS:\n          yield put(routine.success(taken));\n          break;\n      }\n    } catch (e) {\n      fulfill = true;\n      yield put(routine.failure({ type: FAILURE, message: e.message }));\n    } finally {\n      if (yield cancelled()) {\n        channel.close();\n        fulfill = true;\n      }\n    }\n  }\n  if (!fulfilled) yield put(routine.fulfill());\n}\n\nexport default saveAsBlob;\nexport { watchSaveAsBlob };\n","import { take, put, cancelled } from 'redux-saga/effects';\nimport { eventChannel, END } from 'redux-saga';\n\nconst readAsText = (file) => {\n  return eventChannel((emitter) => {\n    const emitProgress = ({ loaded, total, type }) =>\n      emitter({ type, loaded, total });\n\n    const emitProgressAndStop = ({ loaded, total, type }) => {\n      emitter({ type, loaded, total });\n      emitter(END);\n    };\n\n    const emitResult = ({ loaded, total, type }) => {\n      emitter({ type, loaded, total, result: reader.result });\n    };\n\n    const reader = new FileReader();\n    reader.onprogress = emitProgress;\n    reader.onloadstart = emitProgress;\n    reader.onloadend = emitProgress;\n    reader.onerror = emitProgressAndStop;\n    reader.onabort = emitProgressAndStop;\n    reader.onload = emitResult;\n    try {\n      reader.readAsText(file);\n    } catch (e) {\n      emitter({ type: 'error', message: e.message });\n      emitter(END);\n    }\n    const unsubscribe = () => {};\n    return unsubscribe;\n  });\n};\n\nfunction* watchReadAsText(routine, channel) {\n  let fulfill = false;\n  let fulfilled = false;\n  while (!fulfill) {\n    try {\n      let taken = yield take(channel);\n      switch (taken.type) {\n        case 'error':\n          fulfill = true;\n          yield put(routine.failure(taken));\n          break;\n        case 'abort':\n          fulfill = true;\n          yield put(routine.abort(taken));\n          break;\n        case 'progress':\n          yield put(routine.progress(taken));\n          break;\n        case 'loadstart':\n          yield put(routine.request(taken));\n          break;\n        case 'loadend':\n          fulfill = true;\n          fulfilled = true;\n          yield put(routine.fulfill(taken));\n          break;\n        case 'load':\n          yield put(routine.success(taken));\n          break;\n      }\n    } catch (e) {\n      fulfill = true;\n      yield put(routine.failure({ type: 'error', message: e.message }));\n    } finally {\n      if (yield cancelled()) {\n        channel.close();\n        fulfill = true;\n      }\n    }\n  }\n  if (!fulfilled) yield put(routine.fulfill());\n}\n\nexport default readAsText;\nexport { watchReadAsText };\n","import { all, call, takeEvery, put, select, fork } from 'redux-saga/effects';\nimport * as actions from './actions';\nimport * as rootActions from '../actions';\nimport * as selectors from './selectors';\nimport saveAsBlob, { watchSaveAsBlob } from './saveAsBlob';\nimport readAsText, { watchReadAsText } from './readAsText';\n\nfunction* onDownload() {\n  const isDownloading = yield select(selectors.isDownloading);\n  if (isDownloading) return;\n\n  const name = yield select(selectors.fileName);\n  const data = yield select(selectors.fileData);\n  const type = yield select(selectors.fileType);\n\n  const channel = yield call(saveAsBlob, data, type, name);\n  yield fork(watchSaveAsBlob, actions.download, channel);\n}\n\nfunction* onUpload(action) {\n  const isUploading = yield select(selectors.isUploading);\n  if (isUploading) return;\n\n  const { file } = action.payload;\n\n  if (file.type !== 'application/json' || !/.json$/i.test(file.name)) {\n    yield put(actions.upload.failure('Expected json'));\n    yield put(actions.upload.fulfill());\n    return;\n  }\n\n  if (file.size <= 0) {\n    yield put(actions.upload.failure('File size too small'));\n    yield put(actions.upload.fulfill());\n    return;\n  }\n\n  yield put(actions.upload.request());\n  const channel = yield call(readAsText, file);\n  yield fork(watchReadAsText, actions.readAsText, channel);\n}\n\nfunction* onReadAsTextSuccess(action) {\n  const data = JSON.parse(action.payload.result);\n  yield put(rootActions.restore(data));\n  yield put(actions.upload.success());\n}\nfunction* onReadAsTextFulfill() {\n  yield put(actions.upload.fulfill());\n}\n\nexport default function* handleRequestSaga() {\n  yield all([\n    takeEvery(actions.download.TRIGGER, onDownload),\n    takeEvery(actions.upload.TRIGGER, onUpload),\n    takeEvery(actions.readAsText.SUCCESS, onReadAsTextSuccess),\n    takeEvery(actions.readAsText.FULFILL, onReadAsTextFulfill),\n  ]);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport accounts from './accounts/saga';\nimport io from './io/saga';\n\nfunction* saga() {\n  yield all([fork(accounts), fork(io)]);\n}\n\nexport default saga;\n","/* eslint-env node */\nimport { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport reduxSaga from 'redux-saga';\nimport reduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\nimport rootReducer from './index';\nimport rootSaga from './saga';\n\nconst persistConfig = { key: 'root', storage };\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst sagaMiddleware = reduxSaga();\n\nconst initialState = undefined;\n\nconst enhance = applyMiddleware(reduxThunk, sagaMiddleware);\nconst composed = composeWithDevTools({})(enhance);\n\nconst configureStore = () => {\n  const store = createStore(persistedReducer, initialState, composed);\n  const persistor = persistStore(store);\n\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};\n\n  if (module.hot) {\n    module.hot.accept('./index', () => {\n      const reducers = require('./index').default;\n      store.replaceReducer(reducers);\n    });\n  }\n\n  sagaMiddleware.run(rootSaga);\n\n  return { store, persistor };\n};\n\nexport default configureStore;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport configureStore from '../../state/configureStore';\nimport RootFallback from '../RootFallback';\n\nconst { store, persistor } = configureStore();\n\nconst RootProvider = ({ children }) => (\n  <Provider store={store}>\n    <PersistGate\n      loading={<RootFallback loading=\"persisted state\" />}\n      persistor={persistor}\n    >\n      {children}\n    </PersistGate>\n  </Provider>\n);\n\nRootProvider.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default RootProvider;\n","import emoji from '@lewismoten/emoji';\nimport actionBuilder from '../actionBuilder';\nconst build = actionBuilder('accounts', emoji.cardIndexDividers);\n\nexport const load = build('load');\nexport const unload = build('unload');\n","import {\n  createRoutine,\n  createRoutineCreator,\n  defaultRoutineStages,\n} from 'redux-saga-routines';\n\nconst actionBuilder = (domain, emoji) => {\n  const actionTypePrefix = (action) => `${domain} ${emoji} ${action}`;\n\n  const build = (action) => createRoutine(actionTypePrefix(action));\n\n  const withStages = (action, ...stages) => {\n    const creator = createRoutineCreator([...defaultRoutineStages, ...stages]);\n    return creator(actionTypePrefix(action));\n  };\n\n  const fileReaderStages = (action) =>\n    withStages(action, 'PROGRESS', 'ABORT');\n\n  build.withStages = withStages;\n  build.fileReaderStages = fileReaderStages;\n\n  return build;\n};\n\nexport default actionBuilder;\n","import emoji from '@lewismoten/emoji';\nimport actionBuilder from '../actionBuilder';\nconst build = actionBuilder('io', emoji.floppyDisk);\n\nexport const download = build('download');\nexport const upload = build('upload');\nexport const replaceState = build('replace state');\nexport const readAsText = build.fileReaderStages('read as text');\n","import { createSelector } from 'reselect';\n\nconst slice = ({ io = {} } = {}) => io;\nexport const isDownloading = createSelector(\n  slice,\n  ({ isDownloading }) => !!isDownloading\n);\nexport const hasDownloadError = createSelector(\n  slice,\n  ({ hasDownloadError }) => !!hasDownloadError\n);\nexport const hasDownloaded = createSelector(\n  slice,\n  ({ hasDownloaded }) => !!hasDownloaded\n);\nexport const isUploading = createSelector(\n  slice,\n  ({ isUploading }) => !!isUploading\n);\nexport const hasUploadError = createSelector(\n  slice,\n  ({ hasUploadError }) => !!hasUploadError\n);\nexport const hasUploaded = createSelector(\n  slice,\n  ({ hasUploaded }) => !!hasUploaded\n);\n\nexport const fileName = () => 'file.json';\nexport const fileData = (state) => JSON.stringify(state, null, '  ');\nexport const fileType = () => 'application/json';\n"],"names":["onLoadRequest","produce","draft","isLoading","onLoadSuccess","action","hasError","allIds","payload","byId","hasLoaded","onLoadFailure","onLoadFulfill","handleActions","actions","restore","actionBuilder","emoji","build","initialState","isDownloading","hasDownloadError","hasDownloaded","isUploading","hasUploadError","hasUploaded","onDownloadRequest","onDownloadSuccess","onDownloadFailure","onDownloadFulfill","onUploadRequest","onRestore","onUploadSuccess","onUploadFailure","onUploadFulfill","rootActions","INITIAL_STATE","reducers","accounts","io","sliceReducers","combineReducers","slice","createSelector","onLoad","handleRequestSaga","select","selectors","id","name","put","all","takeEvery","watchSaveAsBlob","REQUEST","FAILURE","FULFILL","SUCCESS","routine","channel","fulfill","fulfilled","take","taken","type","failure","request","success","message","cancelled","close","data","eventChannel","emitter","then","fileSaver","console","log","Object","keys","saveAs","Blob","e","END","watchReadAsText","abort","progress","file","emitProgress","loaded","total","emitProgressAndStop","reader","FileReader","onprogress","onloadstart","onloadend","onerror","onabort","onload","result","readAsText","onDownload","onUpload","onReadAsTextSuccess","onReadAsTextFulfill","call","saveAsBlob","fork","test","size","JSON","parse","saga","persistConfig","key","storage","persistedReducer","persistReducer","state","sagaMiddleware","reduxSaga","enhance","applyMiddleware","reduxThunk","composed","composeWithDevTools","store","createStore","undefined","persistor","persistStore","runSaga","run","asyncReducers","rootSaga","configureStore","children","loading","RootFallback","load","unload","domain","actionTypePrefix","createRoutine","withStages","stages","creator","createRoutineCreator","defaultRoutineStages","fileReaderStages","download","upload","fileName","fileData","stringify","fileType"],"sourceRoot":""}